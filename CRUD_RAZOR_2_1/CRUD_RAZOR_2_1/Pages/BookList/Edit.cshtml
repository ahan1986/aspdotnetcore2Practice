@page
@model CRUD_RAZOR_2_1.Pages.BookList.EditModel
@{
    ViewData["Title"] = "Edit";
}
<br />
<h2>Edit a Book</h2>

<div style="border: 1px solid #bbb9b9; border-radius: 10px;">
    @* the form Tage helper along with the post method*@
    <form method="post">

        <div asp-validation-summary="ModelOnly" class="text-danger"></div>
        @*Error: NullReferenceException: Object reference not set to an instance of an object.  Therefore you'll need the following line.  If you remember, in order to send id BACK to the controller, you need to have asp-for which will give you the "name" and the empty value.  With this information the controller can make the changes to the specific Book.  This also has to be inbetwen the <form> tag*@
        <input hidden asp-for="Book.Id" />

        <div class="row" style="padding-left: 15px; padding-top: 30px;">
            <div class="form-group">
                <div class="row">
                    <div class="col-sm-1">
                        <label asp-for="Book.Name"></label>
                    </div>
                    <div class="col-sm-4">
                        @*Book.Name is binding the "book" method in the Controller and the "Name" in the model connected to it. This is how you add values to the database through the view.  When you look at the HTML page for this tag you will see that there is a "name" attribute. This name is the variable that sends the information the user inputed to the controller*@
                        <input asp-for="Book.Name" class="form-control" />
                    </div>
                    <span asp-validation-for="Book.Name" class="text-danger"></span>
                </div>
            </div>

            <div class="form-group">
                <div class="row">
                    <div class="col-sm-1">
                        <label asp-for="Book.ISBN"></label>
                    </div>
                    <div class="col-sm-4">
                        @*Book.Name is binding the "book" method in the Controller and the "Name" in the model connected to it. This is how you add values to the database through the view.  When you look at the HTML page for this tag you will see that there is a "name" attribute. This name is the variable that sends the information the user inputed to the controller*@
                        <input asp-for="Book.ISBN" class="form-control" />
                    </div>
                    <span asp-validation-for="Book.ISBN" class="text-danger"></span>
                </div>
            </div>

            <div class="form-group">
                <div class="row">
                    <div class="col-sm-1">
                        <label asp-for="Book.Author"></label>
                    </div>
                    <div class="col-sm-4">
                        @*Book.Name is binding the "book" method in the Controller and the "Name" in the model connected to it. This is how you add values to the database through the view.  When you look at the HTML page for this tag you will see that there is a "name" attribute. This name is the variable that sends the information the user inputed to the controller*@
                        <input asp-for="Book.Author" class="form-control" />
                    </div>
                    <span asp-validation-for="Book.Author" class="text-danger"></span>
                </div>
            </div>
            <br />
            <div class="form-group">
                <input type="submit" value="Update" class="btn btn-primary btn-sm" />
                <a asp-page="Index" class="btn btn-success btn-sm">Back to List</a>
            </div>
        </div>

    </form>
</div>

@section Scripts{
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
}